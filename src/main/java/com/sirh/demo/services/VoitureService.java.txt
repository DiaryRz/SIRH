package com.sirh.demo.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.Service_bus.generalisation.GenericService;
import com.example.Service_bus.models.ChangementChauffeur;
import com.example.Service_bus.models.Personnel;
import com.example.Service_bus.models.Retour;
import com.example.Service_bus.models.Voiture;
import com.example.Service_bus.models.VoitureHistorique;
import com.example.Service_bus.repositories.ChangementChauffeurRepository;
import com.example.Service_bus.repositories.VoitureHistoriqueRepository;
import com.example.Service_bus.repositories.VoitureRepository;
import com.example.Service_bus.utilities.ConvertPrimaryKey;
import com.mongodb.DuplicateKeyException;

import java.sql.Timestamp;
import java.time.LocalDateTime;

import jakarta.persistence.EntityNotFoundException;

@Service
public class VoitureService {

    @Autowired
    private VoitureRepository voitureRepository;

    @Autowired
    private ChauffeurService AppelChauffeurService;

    @Autowired
    private VoitureHistoriqueRepository voitureHistoriqueRepository;

    @Autowired
    private ChangementChauffeurRepository changementChauffeurRepository;

    @Autowired
    private MongoTemplate mongoTemplate;


    public Retour creerVoitureAvecChauffeur(Voiture voiture,String idChauffeur) throws Exception {
        try {
            ConvertPrimaryKey convertPrimaryKey = new ConvertPrimaryKey();
            GenericService genericService = new GenericService(mongoTemplate);
            String id = "PERS_00"+String.valueOf(convertPrimaryKey.ConvertStringPrimaryKey(genericService.getDernierElementInsere(Voiture.class,"Id_voiture"))+1);
            Personnel savedChauffeur = AppelChauffeurService.trouverChauffeurParId(idChauffeur) ;

            System.out.println(voiture.getImmatricule());
            voiture.setChauffeur(savedChauffeur);

            voiture.setId_voiture(id);
            return new Retour(voitureRepository.save(voiture));
        } catch (DuplicateKeyException e) {
            throw new RuntimeException("Une voiture avec cette immatriculation existe déjà.");
        }
    }

    public Retour selectVoiture(){
        return new Retour(voitureRepository.findAll());
    }

    public Retour trouverParId(String id) {
        return new Retour(voitureRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Voiture non trouvé pour l'id : " + id)));
    }

    @Transactional
    public Retour ModifierVoiture(String idVoiture, String idChauffeur) {
        Voiture voitureAvant = (Voiture) trouverParId(idVoiture).getData();
        if (voitureAvant == null) {
            throw new EntityNotFoundException("Voiture non trouvée avec l'ID: " + idVoiture);
        }
        LocalDateTime now = LocalDateTime.now();
        Timestamp timestamp = Timestamp.valueOf(now);
        ChangementChauffeur vH = new ChangementChauffeur(voitureAvant, timestamp);
        changementChauffeurRepository.save(vH);

        Personnel chauffeur =  AppelChauffeurService.trouverChauffeurParId(idChauffeur);
        voitureAvant.setChauffeur(chauffeur);

        voitureRepository.save(voitureAvant);

        return new Retour(voitureAvant);
    }

    @Transactional
    public void SupprimerVoiture(String idVoiture) {
        Voiture voitureAvant = (Voiture) trouverParId(idVoiture).getData();
        if (voitureAvant == null) {
            throw new EntityNotFoundException("Voiture non trouvée avec l'ID: " + idVoiture);
        }

        LocalDateTime now = LocalDateTime.now();
        Timestamp timestamp = Timestamp.valueOf(now);
        VoitureHistorique vH = new VoitureHistorique(voitureAvant, timestamp);
        voitureHistoriqueRepository.save(vH);

        voitureRepository.delete(voitureAvant);
    }


}